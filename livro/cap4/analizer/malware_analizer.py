#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simulador b√°sico de an√°lise de malware
Uso educacional ‚Äì Debian Linux
"""

import os
import hashlib
import re

# Hashes MD5 simulados de malware
MALWARE_HASHES = {
    "5d41402abc4b2a76b9719d911017c592": "Trojan.Generic",
    "098f6bcd4621d373cade4e832627b4f6": "Worm.TestVirus",
    "ad0234829205b9033196ba818f7a872b": "Ransomware.Fake"
}

# Padr√µes suspeitos em c√≥digo
PADROES_SUSPEITOS = [
    r'exec\s*\(', r'eval\s*\(', r'import\s+subprocess',
    r'os\.system\s*\(', r'socket\.socket\s*\(', 
    r'base64\.decode', r'urllib\.request', r'__import__\s*\('
]

def calcular_md5(caminho):
    try:
        with open(caminho, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return None

def buscar_padroes(caminho):
    try:
        with open(caminho, 'r', encoding='utf-8', errors='ignore') as f:
            conteudo = f.read()
        return [p for p in PADROES_SUSPEITOS if re.search(p, conteudo, re.IGNORECASE)]
    except:
        return []

def analisar_arquivo(caminho):
    if not os.path.exists(caminho):
        return {"erro": "Arquivo n√£o encontrado"}

    md5 = calcular_md5(caminho)
    tamanho = os.path.getsize(caminho)
    status = "LIMPO"
    ameacas = []

    if md5 in MALWARE_HASHES:
        status = "INFECTADO"
        ameacas.append(f"Malware detectado: {MALWARE_HASHES[md5]}")

    padroes = buscar_padroes(caminho)
    if padroes and status == "LIMPO":
        status = "SUSPEITO"
    ameacas += [f"Padr√£o suspeito: {p}" for p in padroes]

    return {
        "arquivo": caminho,
        "tamanho": f"{tamanho} bytes",
        "md5": md5,
        "status": status,
        "ameacas": ameacas
    }

def criar_arquivos_teste():
    with open("/tmp/arquivo_limpo.py", "w") as f:
        f.write("print('Ol√° Mundo')\n")
    with open("/tmp/arquivo_suspeito.py", "w") as f:
        f.write("import subprocess\nexec('print(\"suspeito\")')\n")
    with open("/tmp/malware_fake.txt", "w") as f:
        f.write("test")  # hash bate com Worm.TestVirus
    print("‚úì Arquivos de teste criados em /tmp/")

def main():
    print("=== Simulador de An√°lise de Malware ===\n")
    criar_arquivos_teste()

    arquivos = [
        "/tmp/arquivo_limpo.py",
        "/tmp/arquivo_suspeito.py",
        "/tmp/malware_fake.txt"
    ]

    for caminho in arquivos:
        print(f"\nüìÅ Analisando: {caminho}")
        resultado = analisar_arquivo(caminho)

        if "erro" in resultado:
            print(f"‚ùå {resultado['erro']}")
            continue

        icone = {"LIMPO": "‚úÖ", "SUSPEITO": "‚ö†Ô∏è", "INFECTADO": "üö®"}[resultado["status"]]
        print(f"{icone} Status: {resultado['status']}")
        print(f"üìè Tamanho: {resultado['tamanho']}")
        print(f"üîí MD5: {resultado['md5']}")
        for ameaca in resultado["ameacas"]:
            print(f"   ‚Ä¢ {ameaca}")

    print("\nAn√°lise conclu√≠da!")

if __name__ == "__main__":
    main()
